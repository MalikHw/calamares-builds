name: Ultimate Calamares Build (Qt5 Edition)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

  install_deps:
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - name: Install ALL Qt5 dependencies
      run: |
        sudo apt-get update -y
        sudo apt-get install -y --install-recommends --install-suggests --ignore-missing \
          # Core build
          build-essential cmake extra-cmake-modules ninja-build git pkg-config gettext \
          
          # Qt5 (full suite)
          qtbase5-dev qtbase5-dev-tools qttools5-dev qttools5-dev-tools \
          qtdeclarative5-dev qtquickcontrols2-5-dev qt5-qmake qt5-default \
          qtwebengine5-dev libqt5webenginecore5 libqt5webenginewidgets5 \
          qtmultimedia5-dev qtscript5-dev qtlocation5-dev qtsensors5-dev \
          qtconnectivity5-dev qtwayland5-dev-tools qt5svg5-dev \
          qml-module-qtquick2 qml-module-qtquick-controls qml-module-qtquick-layouts \
          
          # KDE Frameworks
          libkf5config-dev libkf5coreaddons-dev libkf5i18n-dev libkf5parts-dev \
          libkf5service-dev libkf5solid-dev libkf5crash-dev libkf5package-dev \
          
          # System libraries
          python3-dev python3-pip libyaml-cpp-dev libkpmcore-dev \
          libappstreamqt-dev libpwquality-dev libparted-dev libcryptsetup-dev \
          libatasmart-dev libboost-python-dev libpolkit-qt5-1-dev \
          
          # Filesystem tools
          os-prober rsync squashfs-tools dosfstools e2fsprogs btrfs-progs \
          xfsprogs f2fs-tools jfsutils reiserfsprogs nilfs-tools udftools \
          lvm2 cryptsetup

    - name: Install Python packages
      run: |
        pip install --break-system-packages \
          pyyaml jsonschema requests distro pybind11

  clone:
    needs: install_deps
    runs-on: ubuntu-latest
    steps:
    - name: Full recursive clone
      run: |
        git clone --recursive https://codeberg.org/calamares/calamares.git
        cd calamares
        git submodule update --init --recursive --depth=1
        echo "CALAMARES_VERSION=$(git describe --tags --always)" >> $GITHUB_ENV
        echo "CALAMARES_COMMIT=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

  build:
    needs: clone
    runs-on: ubuntu-latest
    steps:
    - name: Configure build
      run: |
        cd calamares
        mkdir build
        cd build
        cmake -GNinja .. \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=/usr \
          -DQT_MAJOR_VERSION=5 \
          -DWITH_PYTHONQT=ON \
          -DWITH_PYTHON=ON \
          -DWITH_QML=ON \
          -DWEBVIEW_FORCE_WEBKIT=OFF \
          -DWITH_KPMcore=ON \
          -DWITH_APPSTREAM=ON \
          -DWITH_NETWORKMANAGER=ON \
          -DWITH_PLYMOUTHCFG=ON \
          -DWITH_NETINSTALL=ON \
          -DWITH_PARTITIONMANAGER=ON \
          -DWITH_CRASH=ON \
          -DWITH_LIBPARTED=ON \
          -DWITH_UDISKS=ON \
          -DSKIP_MODULES=""

    - name: Build with Ninja
      run: |
        cd calamares/build
        ninja -j$(nproc)

  package:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Install to temp directory
      run: |
        cd calamares/build
        DESTDIR=/tmp/calamares-ultimate ninja install
        echo "Version: ${{ env.CALAMARES_VERSION }}" > /tmp/calamares-ultimate/VERSION
        echo "Commit: ${{ env.CALAMARES_COMMIT }}" >> /tmp/calamares-ultimate/VERSION

    - name: Create tarball
      run: |
        tar -czvf /tmp/calamares-ultimate.tar.gz -C /tmp/calamares-ultimate .

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: calamares-ultimate
        path: /tmp/calamares-ultimate.tar.gz
